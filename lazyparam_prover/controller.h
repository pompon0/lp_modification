#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include <memory>
#include "lazyparam_prover/index.h"
#include "lazyparam_prover/parse.h"
#include "lazyparam_prover/search_state.h"
#include "lazyparam_prover/connection_tableau/cont.h"
#include "tool/bin/wrapper.h"

// TODO: apart running ML to choose the right alternative to find the answer,
//   run ML to minimize the search space by an appropriate choice of task order
namespace controller {

class Problem {
public:
  using Ptr = std::shared_ptr<const Problem>;
  static Ptr New(const str &tptp_fof) {
    auto file = tptp_to_proto(tptp_cnf(tptp_fof));
    auto p = own(new Problem());
    p->A = make<memory::Alloc>();
    p->idx = make<tableau::ClauseIndex>(tableau::ParseCtx().parse_orForm(*p->A,file));
    return p;
  }
  friend class Prover;
private:
  Problem() = default;
  ptr<memory::Alloc> A;
  ptr<tableau::ClauseIndex> idx;

  static str tptp_cnf(const str &tptp_fof) {
    tool::Request req;
    req.mutable_fof_to_cnf()->set_tptp_fof(tptp_fof);
    return tool::bin::wrapper(Ctx::background(),req).fof_to_cnf().tptp_cnf();
  }
  static tptp::File tptp_to_proto(const str &tptp_cnf) {
    tool::Request req;
    req.mutable_tptp_to_proto()->set_tptp(tptp_cnf);
    req.mutable_tptp_to_proto()->set_lang(tptp::Input::CNF);
    return tool::bin::wrapper(Ctx::background(),req).tptp_to_proto().file();
  }
};

struct Div {
  using Task = memory::function<void(Div*)>;
  using Cont = memory::List<Task>;

  enum { size_limit = 1000000 };
  memory::Alloc &A;
  tableau::SearchState *state;
  template<typename F> INL void or_(tableau::Features x, F f){ actions.push_back(_and.add(A,Task(A,f))); }
  template<typename F> INL void and_(F f){ _and.push(A,Task(A,f)); }
  INL void done(tableau::Features f){ actions.push_back(_and); }
  
  // TODO: assert that actions generated by a single continuation share state save
  // TODO: provide the same invariant for allocator save.
  // TODO: OR do not allow for restoring to continuation diverging from the chosen path
  //   (sounds healthier), anyway assert the restore correctness in DEBUG mode
  
  INL static ptr<vec<Cont>> Run(memory::Alloc &A, tableau::SearchState *state, Cont cont) { FRAME("Div::Run");
    DEBUG if(cont.empty()) error("empty cont");
    Div d{A,state,cont.tail(),make<vec<Cont>>()};
    cont.head()(&d);
    return d.next;
  }
private:
  Cont _and;
  ptr<vec<Cont>> next;
};

class Prover {  
  Prover() = default;
  ptr<memory::Alloc> A;
  ptr<tableau::SearchState> state;

  Div::Cont current;
  ptr<vec<Div::Cont>> next;
  
  Cont start;
  tableau::SearchState::Save start_state;
  memory::Alloc::Save start_A;
public:

  static ptr<Prover> New(Problem::Ptr problem) {
    auto p = own(new Prover());
    p->A = make<memory::Alloc>();
    p->state = make<tableau::SearchState>(*problem->idx,FunOrd());
    p->start = Cont(*p->A,Task(*p->A,[](Div *d){ tableau::connection_tableau::Cont::start(d); }));
    p->start_A = p->A->save();
    p->start_state = p->state->save();
    p->current = p->start;
    return p;
  }

  INL void reset() {
    state->restore(start_state);
    A.restore(start_A);
    current = start;
  }

  INL bool done() {
    return current.empty();
  }

  INL size_t action_count() {
    if(!next) next = Div::Run(current);
    return next->size(); 
  }

  INL void apply_action(size_t i) {
    if(!next) next = Div::Run(current);
    DEBUG if(i>=next->size()) error("run_action(%), there are % actions",i,next->size());
    current = next[a.i];
  }
};

bool search(const Ctx &ctx, Prover &p) { FRAME("controller::search");
  SCOPE("controller::search");
  vec<Prover::Action> as{p.reset()};
  size_t steps = 0;
  for(;as.size(); steps++) {
    Prover::Action a = as.back();
    as.pop_back();
    if(a.done()) return true;
    if(steps%100==0 && ctx.done()) break;
    DEBUG if(steps%1000==0) info("steps = %",steps);
    for(auto x : p.run(a)) as.push_back(x);
  }
  DEBUG info("steps = %",steps);
  return false;
}

} // namespace controller

#endif // CONTROLLER_H_
