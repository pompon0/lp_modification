load("@rules_haskell//haskell:defs.bzl", "haskell_library", "haskell_test")

haskell_test(
  name = "DefDNF_test",
  srcs = ["DefDNFTest.hs"],
  deps = [
    ":tptp-parser",
    "@stackage//:base",
    "@stackage//:tasty",
    "@stackage//:tasty-hunit",
  ],
)

haskell_library(
    name = "tptp-parser",
    srcs = glob(["**/*.hs"],exclude=["DefDNFTest.hs"]),
    visibility = ["//visibility:public"],
    deps = [
        "@stackage//:base",
        "@stackage//:either",
        "@stackage//:tasty-hunit",
        "@stackage//:tasty",
        "@stackage//:parsec",
        "@stackage//:transformers",
        "@stackage//:unix",
        "@stackage//:bytestring",
        "@stackage//:utf8-string",
        "@stackage//:tar",
        "@stackage//:http-conduit",
        "@stackage//:zlib",
        "@stackage//:lens",
        "@stackage//:proto-lens-runtime",
        "@stackage//:proto-lens",
        "@stackage//:microlens",
        "@stackage//:text",
        "@stackage//:containers",
        "@stackage//:mtl",
        "@stackage//:MissingH",
        "@stackage//:threads",
        "@stackage//:concurrent-extra",
        "@stackage//:unbounded-delays",
        "@stackage//:deepseq",
        "@stackage//:split",
        "@stackage//:data-ordlist",
        "@stackage//:clock",
        "@stackage//:hashable",
        "@stackage//:hashtables",
        "@stackage//:options",
        "@stackage//:array",
        "@set-monad//:set-monad",
        "//tptp_parser/proto:tptp_haskell_proto",
        "//tptp_parser/proto:proof_haskell_proto",
        "//tptp_parser/proto:solutions_haskell_proto",
    ],
)
